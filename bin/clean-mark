#!/usr/bin/env node
'use strict'

const fs = require('fs')
const path = require('path')
const c = require('../')
const s = require('../lib/stats')
const { urlPath } = require('../lib/util')
const argv = require('minimist')(process.argv.slice(2))

if (argv.help) {
  const help = fs.readFileSync(path.join(__dirname, 'usage.txt'), 'utf8')
  console.log(help.trim())
  process.exit()
}

if (!argv._.length) {
  console.warn('=>  Please provide a URL to convert.')
  process.exit()
}

function getExtension (type) {
  if (type === 'text') {
    return '.txt'
  } else if (type === 'html') {
    return '.html'
  } else {
    return '.md'
  }
}

function getMarker (type) {
  if (type === 'text') {
    return ['', '']
  } else if (type === 'html') {
    return ['<!--', '-->']
  } else {
    return ['---', '---']
  }
}

(async function main () {
  let dict
  const useDb = !argv.nodb
  const type = (argv.t || argv.type || '').toLowerCase()
  const output = argv.o || argv.output
  const ext = getExtension(type)
  const mark = getMarker(type)

  console.log('=> Processing URL ...')

  // Cycle all provided URLs
  for (const link of argv._) {
    try {
      dict = await c(link, {useDatabase: useDb, fileType: type})
      const text = `\[Source\]\(${dict.url}\)\n\n\# ${dict.title}\n\n${dict.text}\n`
      const path = (output || urlPath(link)) + ext
      console.log('>', path)
      fs.writeFileSync(path, text)
    } catch (err) {
      console.error(err)
    }
  }

  console.log('=>  URL saved!')
})()
